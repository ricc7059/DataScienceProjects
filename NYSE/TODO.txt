1. Write a Java MapReduce program that calculates, for each stock, the percentage change between the high and low stock price for each day, which equals (high - low)*100/low. Then, find the highest such percentage change for each stock.  Your output should be a Text stock symbol key and a FloatWritable maximum percentage value. Use 26 reducers. After the job runs, list the first and last lines of the first reducer output file part-r-00000. You should see stock symbols that differ in the first letter. Note that I made the data a little unclean, so handle any exception case you encounter.

2. Next, add a custom partitioner to force all stock symbols that begin with the same letter to the same reducer, instead of the default behavior which hashes the whole stock symbol mod the number of reducers. In the getPartition() method below, you will need to return an integer between 0 and 25, depending on the first letter of the stock symbol. After the job runs, list the first and last lines of the first
reducer output file part-r-00000. You should see that only stock symbols that begin with the same letter appear in that file. See the template for NYSEPartitioner.java below.
